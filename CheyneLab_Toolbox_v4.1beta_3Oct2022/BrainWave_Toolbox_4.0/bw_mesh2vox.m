%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function bw_mesh2vox(matfile, meshFile, voxFile, [useFaces])
%%
%% script to read VTK surface file from Jason (native coordinates)
%% rotate into .mri frame of reference and write vertex locations and their
%% normals (based on the mean of the surrounding face normals) to a .vox
%% file used by makeBeamformer program
%%
%% Input:       
%% matfile        - this is a file generated by mri2nii that contains the
%%                  nii to CTF (head) coordinates transformation matrix
%% mesh           - mesh file (can be .vtk from CIVET or .asc from Freesurfer
%%
%% Option:        
%% useFaces       - use face centers as voxels/normals instead of vertices. 
%% 
%% Output:
%% voxFile        - name of output file
%%
%%
%% written by D. Cheyne, June, 2010
%%
%% updated for BrainWave Dec, 2013
%% 
%%  Dec 2013 - added option to read multiple mesh formats and combine meshes
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function bw_mesh2vox(matfile, meshFile, voxFile, useFaces)

global BW_VERSION

if iscellstr(meshFile)
    numFiles = size(meshFile,2);
else
    numFiles = 1;
end

% load rotation matrix from .mat file generated by mri2nii
tmat = load(matfile);       
M = tmat.M;             % voxel-to-head transformation matrix

if ~exist('useFaces','var')
    useFaces = 0;
end

% read one or multiple meshes

% make a pseudo progress bar so user knows something is happening
s = sprintf('Reading %d mesh file(s) ...',numFiles);
wbh = waitbar(0,s);
for i=0:5:20
    waitbar(i/100,wbh);
end

% read one or more mesh files and combine all vertices and faces

for k=1:numFiles
    
    if iscellstr(meshFile)
        file = char( meshFile(k) );
    else
        file = meshFile;
    end
    
    [meshtype, meshdata] = bw_readMeshFile(file);

    if isempty(meshdata)
        fprintf('failed to read mesh file %s - check format...\n', file);
        return;
    end

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
    %    New: assume ALL meshes are stored in mm - so have to scale
    %    back to voxels since the transformation matrix assumes voxels
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
    fprintf('rescaling mesh from mm to voxels\n');
    meshdata.vertices = meshdata.vertices ./tmat.mmPerVoxel;
    
    if k == 1
        vertices = meshdata.vertices;
        faces = meshdata.faces;
    else
        offset = size(vertices,1);
        vertices = [vertices; meshdata.vertices];

        % have to add offset to face indices
        meshdata.faces = meshdata.faces + offset;
        faces = [faces; meshdata.faces];
    end        
    
    clear meshdata;
    
end

% rotate vertices into head coordinates 

fprintf('rotating and scaling vertices from voxels into MEG (head) coordinates ...\n');

vertices = [vertices, ones(size(vertices,1), 1) ];
vertices = (vertices * M) * 0.1;  % transform to head coordinates and scale to cm
vertices(:,4) = [];

Nvertices = size(vertices,1);
Nfaces = size(faces,1);

for i=40:5:60
    waitbar(i/100,wbh, 'computing normals');
end

tic;
if useFaces
    % place sources at centroid of each triangle 

    nvoxels = Nfaces;
    voxels = zeros(nvoxels,3);
    normals = zeros(nvoxels,3);

    fprintf('computing face centers and normals....\n');

    for i=1:Nfaces
        v1 = vertices(faces(i,1)+1,:);
        v2 = vertices(faces(i,2)+1,:);
        v3 = vertices(faces(i,3)+1,:);
        voxels(i,1:3) =  (v1 + v2 + v3) / 3;
        V = cross((v1-v2),(v2-v3));
        normals(i,1:3) = V /norm(V);
    end
else
    % place sources at vertices

    nvoxels = Nvertices;
    voxels = vertices;
   
    % for each vertex find its adjoining faces and take the mean of each face
    % normal as the normal for that vertex
    fprintf('computing vertex normals ...\n');

    if exist('bw_computeFaceNormals','file') == 3
        % use mex function       
        normals = bw_computeFaceNormals(double(vertices'), double(faces')); 
        normals = normals';
    else  
        % matlab code to get vertices
        % get normal for each vertex.  This is the mean of the surrounding face normals
        fprintf('mex function bw_computeFaceNormals not found. Computing normals using m-file...\n');
        normals = zeros(nvoxels,3);

        for i=1:size(vertices,1)  
            voxels(i,1:3) = vertices(i,1:3);
            faceIdx = i-1;  % since face numbers start at zero
            [idx, ~] = find(faces == faceIdx);
            meanVertex = zeros(1,3);
            numFaces = length(idx);
            for j=1:numFaces
                faceNo = idx(j);
                v1 = vertices(faces(faceNo,1)+1,:);   % add 1 to vertex number since matlab array indices start at 1 not zero.
                v2 = vertices(faces(faceNo,2)+1,:);
                v3 = vertices(faces(faceNo,3)+1,:);
                V = cross((v1-v2),(v2-v3));
                V = V / norm(V); 
                meanVertex = meanVertex + V;       
            end
            meanVertex = meanVertex / numFaces;
            meanVertex = meanVertex / norm(meanVertex);  % rescale to unit vector 
            normals(i,1:3) = meanVertex(1:3);         
        end
    end

end
toc


for i=60:5:90
    waitbar(i/100,wbh,'saving data....');
end

fprintf('writing %d voxels to vox file %s \n',nvoxels, voxFile);

fid = fopen(voxFile,'w');
if (fid == -1)
    fprintf('failed to open file %s\n',voxFile);
    return;
end
fprintf(fid,'%d\n', nvoxels);
for i=1:nvoxels
    fprintf(fid,'%.2f\t%.2f\t%.2f\t%.3f\t%.3f\t%.3f\n',voxels(i,1:3), normals(i,1:3));        
end

fclose(fid);


% *** save a vtk file of the mesh corresponding to this vox file with same
% name for BrainWave plotting and combining meshes

% *** also save mesh in CTF coordinates along with normals for faster
% reading

% ** changed naming convention as it might overwrite the original mesh file
vtk_file = strcat(voxFile,'.vtk');
fprintf('saving mesh data in VTK file %s \n', vtk_file);

fid = fopen(vtk_file,'w');
if (fid == -1)
    fprintf('failed to open file %s\n',voxFile);
    return;
end

fprintf(fid, '# vtk DataFile Version 2.0\n');
fprintf(fid, 'File: %s (Mesh file created by BrainWave version %s)\n', voxFile, BW_VERSION);
fprintf(fid, 'ASCII\n');
fprintf(fid, 'DATASET POLYDATA\n');

fprintf(fid, 'POINTS %d float\n', nvoxels);

for i=1:nvoxels
    fprintf(fid,'%.6f %.6f %.6f\n',voxels(i,1:3));        
end

% save normals to save time reading for display
fprintf(fid, 'NORMALS vertex_normals float\n' );
for i=1:nvoxels
    fprintf(fid,'%.6f %.6f %.6f\n',normals(i,1:3));        
end

fprintf(fid, 'POLYGONS %d %d\n', size(faces,1), size(faces,1) * 4 );

for i=1:size(faces,1)
    fprintf(fid,'3 %d %d %d\n',faces(i,1:3));        
end

fclose(fid);


for i=90:5:100
    waitbar(i/100,wbh,'finishing....');
end
delete(wbh);

%%%%%%%%% optional debug stuff - save normals as dipoles in a CTF dip file 
%     dipNo = 1;
%     Q = 20.0;
%     
%     outfile = strrep(voxFile,'.vox','.dip');
% 
%     fid = fopen(outfile,'w');
%     if (fid == -1)
%         fprinf('failed to open file \n',outfile);
%         return;
%     end
% 
%     fprintf(fid,'File_Info\n');
%     fprintf(fid,'{\n');
%     fprintf(fid,'\tVERSION:\tCTF_HEAD_MODEL_FILE_VERSION_5.0\n');
%     fprintf(fid,'}\n\n');
%     fprintf(fid,'Dipoles\n');
%     fprintf(fid,'{\n');
% 
%     for i=1:nvoxels
%         % rescale normals to unit vectors before writing out!!
%         fprintf(fid,'\t%d:\t%.2f\t%.2f\t%.2f\t%.3f\t%.3f\t%.3f\t%.2f\n',dipNo, voxels(i,1:3), normals(i,1:3), Q);        
%         dipNo = dipNo + 1;
%     end
%     fprintf(fid,'}\n');
% 
%     fprintf('wrote %d dipoles to <%s> \n', dipNo, outfile);
% 
%     fclose(fid);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

fprintf('all done...\n');

end

